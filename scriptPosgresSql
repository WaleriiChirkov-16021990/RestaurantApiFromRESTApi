
CREATE TABLE dishes_compositions_of_dishes
(
    id                        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    dishes_id                 BIGINT,
    compositions_of_dishes_id BIGINT,
    CONSTRAINT pk_dishes_compositions_of_dishes PRIMARY KEY (id)
);

ALTER TABLE dishes_compositions_of_dishes
    ADD CONSTRAINT FK_DISHES_COMPOSITIONS_OF_DISHES_ON_COMPOSITIONS_OF_DISHES FOREIGN KEY (compositions_of_dishes_id) REFERENCES public.compositions_of_dishes (compositions_of_dishes_id);

ALTER TABLE dishes_compositions_of_dishes
    ADD CONSTRAINT FK_DISHES_COMPOSITIONS_OF_DISHES_ON_DISHES FOREIGN KEY (dishes_id) REFERENCES public.dishes (dishes_id);

CREATE TABLE public.compositions_of_dishes
(
    compositions_of_dishes_id             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    compositions_of_dishes_name           VARCHAR(255),
    compositions_of_dishes_ingredient_id  BIGINT                                  NOT NULL,
    compositions_of_dishes_count_of_units INTEGER,
    compositions_of_dishes_units          BIGINT                                  NOT NULL,
    CONSTRAINT pk_compositions_of_dishes PRIMARY KEY (compositions_of_dishes_id)
);

CREATE TABLE public.discount
(
    discount_id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    discount_name VARCHAR(255)                            NOT NULL,
    discount_sale VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_discount PRIMARY KEY (discount_id)
);

CREATE TABLE public.dishes
(
    dishes_id            BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    dishes_name          VARCHAR(255),
    dishes_price         DOUBLE PRECISION,
    dishes_weight        DOUBLE PRECISION,
    dishes_calories      INTEGER,
    dishes_proteins      INTEGER,
    dishes_fats          INTEGER,
    dishes_carbohydrates INTEGER,
    dishes_image_url     VARCHAR(255),
    CONSTRAINT pk_dishes PRIMARY KEY (dishes_id)
);

CREATE TABLE public.dishes_compositions_of_dishes
(
    id                        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    dishes_id                 BIGINT,
    compositions_of_dishes_id BIGINT,
    CONSTRAINT pk_dishes_compositions_of_dishes PRIMARY KEY (id)
);

CREATE TABLE public.food_review
(
    food_review_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    food_review_person_id   BIGINT                                  NOT NULL,
    food_review_dishes_id   BIGINT,
    food_review_date_create TIMESTAMP WITHOUT TIME ZONE,
    food_review_grade       INTEGER,
    food_review_comment     VARCHAR(255),
    CONSTRAINT pk_food_review PRIMARY KEY (food_review_id)
);

CREATE TABLE public.ingredients
(
    ingredient_id             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    ingredient_name           VARCHAR(255)                            NOT NULL,
    ingredient_remnant_number INTEGER                                 NOT NULL,
    ingredient_description    VARCHAR(255),
    ingredient_is_vegan       BOOLEAN                                 NOT NULL,
    ingredient_is_spicy       BOOLEAN                                 NOT NULL,
    CONSTRAINT pk_ingredients PRIMARY KEY (ingredient_id)
);

CREATE TABLE public.order_element
(
    order_element_id             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    order_element_order_elements BIGINT,
    order_element_dishes         BIGINT,
    order_element_count          INTEGER,
    CONSTRAINT pk_order_element PRIMARY KEY (order_element_id)
);

CREATE TABLE public.order_table
(
    order_id     BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    order_owner  BIGINT,
    order_price  DOUBLE PRECISION                        NOT NULL,
    order_status VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_order_table PRIMARY KEY (order_id)
);

CREATE TABLE public.person
(
    person_id            BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    person_name          VARCHAR(100)                            NOT NULL,
    person_lastname      VARCHAR(100)                            NOT NULL,
    person_year_of_birth INTEGER                                 NOT NULL,
    person_phone_number  VARCHAR(11)                             NOT NULL,
    person_email         VARCHAR(255)                            NOT NULL,
    person_username      VARCHAR(255)                            NOT NULL,
    person_password      VARCHAR(255)                            NOT NULL,
    person_role          BIGINT,
    person_discount      BIGINT,
    person_created_at    TIMESTAMP WITHOUT TIME ZONE,
    person_updated_at    TIMESTAMP WITHOUT TIME ZONE,
    person_updated_who   VARCHAR(255),
    CONSTRAINT pk_person PRIMARY KEY (person_id)
);

CREATE TABLE public.reserve_table
(
    reverse_table_id                   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    reverse_table_accommodation_number INTEGER                                 NOT NULL,
    reserve_table_state                BIGINT                                  NOT NULL,
    reverse_table_number_of_seats      INTEGER                                 NOT NULL,
    CONSTRAINT pk_reserve_table PRIMARY KEY (reverse_table_id)
);

CREATE TABLE public.restaurant_reviews
(
    restaurant_reviews_id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    restaurant_reviews_owner     BIGINT,
    restaurant_reviews_gradle    INTEGER                                 NOT NULL,
    restaurant_reviews_comment   VARCHAR(255),
    restaurant_reviews_create_at TIMESTAMP WITHOUT TIME ZONE,
    restaurant_reviews_update_at TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_restaurant_reviews PRIMARY KEY (restaurant_reviews_id)
);

CREATE TABLE public.role
(
    role_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    role_name  VARCHAR(255)                            NOT NULL,
    role_value VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_role PRIMARY KEY (role_id)
);

CREATE TABLE public.state_from_table
(
    state_from_table_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    state_from_table_name  VARCHAR(255),
    state_from_table_value VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_state_from_table PRIMARY KEY (state_from_table_id)
);

CREATE TABLE public.table_reservation
(
    table_reservation_id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    table_reservation_table_id           BIGINT                                  NOT NULL,
    table_reservation_user_id            BIGINT                                  NOT NULL,
    table_reservation_date               TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    table_reservation_number_of_guests   INTEGER                                 NOT NULL,
    table_reservation_create_at          TIMESTAMP WITHOUT TIME ZONE,
    table_reservation_author_from_record BIGINT                                  NOT NULL,
    table_reservation_update_at          TIMESTAMP WITHOUT TIME ZONE,
    table_reservation_author_from_update BIGINT                                  NOT NULL,
    CONSTRAINT pk_table_reservation PRIMARY KEY (table_reservation_id)
);

CREATE TABLE public.units_of_measurement
(
    units_of_measurement_id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    units_of_measurement_name       VARCHAR(255)                            NOT NULL,
    units_of_measurement_unit       VARCHAR(255)                            NOT NULL,
    units_of_measurement_commentary VARCHAR(300),
    CONSTRAINT pk_units_of_measurement PRIMARY KEY (units_of_measurement_id)
);

ALTER TABLE public.compositions_of_dishes
    ADD CONSTRAINT FK_COMPOSITIONS_OF_DISHES_ON_COMPOSITIONS_OF_DISHES_INGREDIENT FOREIGN KEY (compositions_of_dishes_ingredient_id) REFERENCES public.ingredients (ingredient_id);

ALTER TABLE public.compositions_of_dishes
    ADD CONSTRAINT FK_COMPOSITIONS_OF_DISHES_ON_COMPOSITIONS_OF_DISHES_UNITS FOREIGN KEY (compositions_of_dishes_units) REFERENCES public.units_of_measurement (units_of_measurement_id);

ALTER TABLE public.food_review
    ADD CONSTRAINT FK_FOOD_REVIEW_ON_FOOD_REVIEW_DISHES FOREIGN KEY (food_review_dishes_id) REFERENCES public.dishes (dishes_id);

ALTER TABLE public.food_review
    ADD CONSTRAINT FK_FOOD_REVIEW_ON_FOOD_REVIEW_PERSON FOREIGN KEY (food_review_person_id) REFERENCES public.person (person_id);

ALTER TABLE public.order_element
    ADD CONSTRAINT FK_ORDER_ELEMENT_ON_ORDER_ELEMENT_DISHES FOREIGN KEY (order_element_dishes) REFERENCES public.dishes (dishes_id);

ALTER TABLE public.order_element
    ADD CONSTRAINT FK_ORDER_ELEMENT_ON_ORDER_ELEMENT_ORDER_ELEMENTS FOREIGN KEY (order_element_order_elements) REFERENCES public.order_table (order_id);

ALTER TABLE public.order_table
    ADD CONSTRAINT FK_ORDER_TABLE_ON_ORDER_OWNER FOREIGN KEY (order_owner) REFERENCES public.person (person_id);

ALTER TABLE public.person
    ADD CONSTRAINT FK_PERSON_ON_PERSON_DISCOUNT FOREIGN KEY (person_discount) REFERENCES public.discount (discount_id);

ALTER TABLE public.person
    ADD CONSTRAINT FK_PERSON_ON_PERSON_ROLE FOREIGN KEY (person_role) REFERENCES public.role (role_id);

ALTER TABLE public.reserve_table
    ADD CONSTRAINT FK_RESERVE_TABLE_ON_RESERVE_TABLE_STATE FOREIGN KEY (reserve_table_state) REFERENCES public.state_from_table (state_from_table_id);

ALTER TABLE public.restaurant_reviews
    ADD CONSTRAINT FK_RESTAURANT_REVIEWS_ON_RESTAURANT_REVIEWS_OWNER FOREIGN KEY (restaurant_reviews_owner) REFERENCES public.person (person_id);

ALTER TABLE public.table_reservation
    ADD CONSTRAINT FK_TABLE_RESERVATION_ON_TABLE_RESERVATION_AUTHOR_FROM_RECORD FOREIGN KEY (table_reservation_author_from_record) REFERENCES public.person (person_id);

ALTER TABLE public.table_reservation
    ADD CONSTRAINT FK_TABLE_RESERVATION_ON_TABLE_RESERVATION_AUTHOR_FROM_UPDATE FOREIGN KEY (table_reservation_author_from_update) REFERENCES public.person (person_id);

ALTER TABLE public.table_reservation
    ADD CONSTRAINT FK_TABLE_RESERVATION_ON_TABLE_RESERVATION_TABLE FOREIGN KEY (table_reservation_table_id) REFERENCES public.reserve_table (reverse_table_id);

ALTER TABLE public.table_reservation
    ADD CONSTRAINT FK_TABLE_RESERVATION_ON_TABLE_RESERVATION_USER FOREIGN KEY (table_reservation_user_id) REFERENCES public.person (person_id);